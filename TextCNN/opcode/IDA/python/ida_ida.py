# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: ida
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_ida', [dirname(__file__)])
        except ImportError:
            import _ida_ida
            return _ida_ida
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_ida', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_ida = swig_import_helper()
    del swig_import_helper
else:
    import _ida_ida
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        ida_idaapi._BC695.replace_fun(func)
        return func

f_EXE_old = _ida_ida.f_EXE_old
f_COM_old = _ida_ida.f_COM_old
f_BIN = _ida_ida.f_BIN
f_DRV = _ida_ida.f_DRV
f_WIN = _ida_ida.f_WIN
f_HEX = _ida_ida.f_HEX
f_MEX = _ida_ida.f_MEX
f_LX = _ida_ida.f_LX
f_LE = _ida_ida.f_LE
f_NLM = _ida_ida.f_NLM
f_COFF = _ida_ida.f_COFF
f_PE = _ida_ida.f_PE
f_OMF = _ida_ida.f_OMF
f_SREC = _ida_ida.f_SREC
f_ZIP = _ida_ida.f_ZIP
f_OMFLIB = _ida_ida.f_OMFLIB
f_AR = _ida_ida.f_AR
f_LOADER = _ida_ida.f_LOADER
f_ELF = _ida_ida.f_ELF
f_W32RUN = _ida_ida.f_W32RUN
f_AOUT = _ida_ida.f_AOUT
f_PRC = _ida_ida.f_PRC
f_EXE = _ida_ida.f_EXE
f_COM = _ida_ida.f_COM
f_AIXAR = _ida_ida.f_AIXAR
f_MACHO = _ida_ida.f_MACHO
class compiler_info_t(object):
    """
    Proxy of C++ compiler_info_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_ida_ida.compiler_info_t_id_get, _ida_ida.compiler_info_t_id_set)
    cm = _swig_property(_ida_ida.compiler_info_t_cm_get, _ida_ida.compiler_info_t_cm_set)
    size_i = _swig_property(_ida_ida.compiler_info_t_size_i_get, _ida_ida.compiler_info_t_size_i_set)
    size_b = _swig_property(_ida_ida.compiler_info_t_size_b_get, _ida_ida.compiler_info_t_size_b_set)
    size_e = _swig_property(_ida_ida.compiler_info_t_size_e_get, _ida_ida.compiler_info_t_size_e_set)
    defalign = _swig_property(_ida_ida.compiler_info_t_defalign_get, _ida_ida.compiler_info_t_defalign_set)
    size_s = _swig_property(_ida_ida.compiler_info_t_size_s_get, _ida_ida.compiler_info_t_size_s_set)
    size_l = _swig_property(_ida_ida.compiler_info_t_size_l_get, _ida_ida.compiler_info_t_size_l_set)
    size_ll = _swig_property(_ida_ida.compiler_info_t_size_ll_get, _ida_ida.compiler_info_t_size_ll_set)
    size_ldbl = _swig_property(_ida_ida.compiler_info_t_size_ldbl_get, _ida_ida.compiler_info_t_size_ldbl_set)
    def set_64bit_pointer_size(self, *args):
        """
        set_64bit_pointer_size(self)
        """
        return _ida_ida.compiler_info_t_set_64bit_pointer_size(self, *args)

    def __init__(self, *args):
        """
        __init__(self) -> compiler_info_t
        """
        this = _ida_ida.new_compiler_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_ida.delete_compiler_info_t
    __del__ = lambda self : None;
compiler_info_t_swigregister = _ida_ida.compiler_info_t_swigregister
compiler_info_t_swigregister(compiler_info_t)

STT_CUR = _ida_ida.STT_CUR
STT_VA = _ida_ida.STT_VA
STT_MM = _ida_ida.STT_MM
STT_DBG = _ida_ida.STT_DBG
class idainfo(object):
    """
    Proxy of C++ idainfo class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    tag = _swig_property(_ida_ida.idainfo_tag_get, _ida_ida.idainfo_tag_set)
    version = _swig_property(_ida_ida.idainfo_version_get, _ida_ida.idainfo_version_set)
    procname = _swig_property(_ida_ida.idainfo_procname_get, _ida_ida.idainfo_procname_set)
    s_genflags = _swig_property(_ida_ida.idainfo_s_genflags_get, _ida_ida.idainfo_s_genflags_set)
    def use_allasm(self, *args):
        """
        use_allasm(self) -> bool
        """
        return _ida_ida.idainfo_use_allasm(self, *args)

    def loading_idc(self, *args):
        """
        loading_idc(self) -> bool
        """
        return _ida_ida.idainfo_loading_idc(self, *args)

    def readonly_idb(self, *args):
        """
        readonly_idb(self) -> bool
        """
        return _ida_ida.idainfo_readonly_idb(self, *args)

    def is_graph_view(self, *args):
        """
        is_graph_view(self) -> bool
        """
        return _ida_ida.idainfo_is_graph_view(self, *args)

    def set_graph_view(self, *args):
        """
        set_graph_view(self, value)
        """
        return _ida_ida.idainfo_set_graph_view(self, *args)

    lflags = _swig_property(_ida_ida.idainfo_lflags_get, _ida_ida.idainfo_lflags_set)
    def is_32bit(self, *args):
        """
        is_32bit(self) -> bool
        """
        return _ida_ida.idainfo_is_32bit(self, *args)

    def is_64bit(self, *args):
        """
        is_64bit(self) -> bool
        """
        return _ida_ida.idainfo_is_64bit(self, *args)

    def is_snapshot(self, *args):
        """
        is_snapshot(self) -> bool
        """
        return _ida_ida.idainfo_is_snapshot(self, *args)

    def is_dll(self, *args):
        """
        is_dll(self) -> bool
        """
        return _ida_ida.idainfo_is_dll(self, *args)

    def is_flat_off32(self, *args):
        """
        is_flat_off32(self) -> bool
        """
        return _ida_ida.idainfo_is_flat_off32(self, *args)

    def is_be(self, *args):
        """
        is_be(self) -> bool
        """
        return _ida_ida.idainfo_is_be(self, *args)

    def set_be(self, *args):
        """
        set_be(self, value) -> bool
        """
        return _ida_ida.idainfo_set_be(self, *args)

    def is_wide_high_byte_first(self, *args):
        """
        is_wide_high_byte_first(self) -> bool
        """
        return _ida_ida.idainfo_is_wide_high_byte_first(self, *args)

    def set_wide_high_byte_first(self, *args):
        """
        set_wide_high_byte_first(self, value)
        """
        return _ida_ida.idainfo_set_wide_high_byte_first(self, *args)

    def set_64bit(self, *args):
        """
        set_64bit(self)
        """
        return _ida_ida.idainfo_set_64bit(self, *args)

    def is_kernel_mode(self, *args):
        """
        is_kernel_mode(self) -> bool
        """
        return _ida_ida.idainfo_is_kernel_mode(self, *args)

    def get_pack_mode(self, *args):
        """
        get_pack_mode(self) -> int
        """
        return _ida_ida.idainfo_get_pack_mode(self, *args)

    def set_pack_mode(self, *args):
        """
        set_pack_mode(self, pack_mode) -> int
        """
        return _ida_ida.idainfo_set_pack_mode(self, *args)

    database_change_count = _swig_property(_ida_ida.idainfo_database_change_count_get, _ida_ida.idainfo_database_change_count_set)
    filetype = _swig_property(_ida_ida.idainfo_filetype_get, _ida_ida.idainfo_filetype_set)
    def like_binary(self, *args):
        """
        like_binary(self) -> bool
        """
        return _ida_ida.idainfo_like_binary(self, *args)

    ostype = _swig_property(_ida_ida.idainfo_ostype_get, _ida_ida.idainfo_ostype_set)
    apptype = _swig_property(_ida_ida.idainfo_apptype_get, _ida_ida.idainfo_apptype_set)
    asmtype = _swig_property(_ida_ida.idainfo_asmtype_get, _ida_ida.idainfo_asmtype_set)
    specsegs = _swig_property(_ida_ida.idainfo_specsegs_get, _ida_ida.idainfo_specsegs_set)
    af = _swig_property(_ida_ida.idainfo_af_get, _ida_ida.idainfo_af_set)
    af2 = _swig_property(_ida_ida.idainfo_af2_get, _ida_ida.idainfo_af2_set)
    baseaddr = _swig_property(_ida_ida.idainfo_baseaddr_get, _ida_ida.idainfo_baseaddr_set)
    start_ss = _swig_property(_ida_ida.idainfo_start_ss_get, _ida_ida.idainfo_start_ss_set)
    start_cs = _swig_property(_ida_ida.idainfo_start_cs_get, _ida_ida.idainfo_start_cs_set)
    start_ip = _swig_property(_ida_ida.idainfo_start_ip_get, _ida_ida.idainfo_start_ip_set)
    start_ea = _swig_property(_ida_ida.idainfo_start_ea_get, _ida_ida.idainfo_start_ea_set)
    start_sp = _swig_property(_ida_ida.idainfo_start_sp_get, _ida_ida.idainfo_start_sp_set)
    main = _swig_property(_ida_ida.idainfo_main_get, _ida_ida.idainfo_main_set)
    min_ea = _swig_property(_ida_ida.idainfo_min_ea_get, _ida_ida.idainfo_min_ea_set)
    max_ea = _swig_property(_ida_ida.idainfo_max_ea_get, _ida_ida.idainfo_max_ea_set)
    omin_ea = _swig_property(_ida_ida.idainfo_omin_ea_get, _ida_ida.idainfo_omin_ea_set)
    omax_ea = _swig_property(_ida_ida.idainfo_omax_ea_get, _ida_ida.idainfo_omax_ea_set)
    lowoff = _swig_property(_ida_ida.idainfo_lowoff_get, _ida_ida.idainfo_lowoff_set)
    highoff = _swig_property(_ida_ida.idainfo_highoff_get, _ida_ida.idainfo_highoff_set)
    maxref = _swig_property(_ida_ida.idainfo_maxref_get, _ida_ida.idainfo_maxref_set)
    xrefnum = _swig_property(_ida_ida.idainfo_xrefnum_get, _ida_ida.idainfo_xrefnum_set)
    type_xrefnum = _swig_property(_ida_ida.idainfo_type_xrefnum_get, _ida_ida.idainfo_type_xrefnum_set)
    refcmtnum = _swig_property(_ida_ida.idainfo_refcmtnum_get, _ida_ida.idainfo_refcmtnum_set)
    s_xrefflag = _swig_property(_ida_ida.idainfo_s_xrefflag_get, _ida_ida.idainfo_s_xrefflag_set)
    max_autoname_len = _swig_property(_ida_ida.idainfo_max_autoname_len_get, _ida_ida.idainfo_max_autoname_len_set)
    nametype = _swig_property(_ida_ida.idainfo_nametype_get, _ida_ida.idainfo_nametype_set)
    short_demnames = _swig_property(_ida_ida.idainfo_short_demnames_get, _ida_ida.idainfo_short_demnames_set)
    long_demnames = _swig_property(_ida_ida.idainfo_long_demnames_get, _ida_ida.idainfo_long_demnames_set)
    demnames = _swig_property(_ida_ida.idainfo_demnames_get, _ida_ida.idainfo_demnames_set)
    def get_demname_form(self, *args):
        """
        get_demname_form(self) -> uchar
        """
        return _ida_ida.idainfo_get_demname_form(self, *args)

    listnames = _swig_property(_ida_ida.idainfo_listnames_get, _ida_ida.idainfo_listnames_set)
    indent = _swig_property(_ida_ida.idainfo_indent_get, _ida_ida.idainfo_indent_set)
    comment = _swig_property(_ida_ida.idainfo_comment_get, _ida_ida.idainfo_comment_set)
    margin = _swig_property(_ida_ida.idainfo_margin_get, _ida_ida.idainfo_margin_set)
    lenxref = _swig_property(_ida_ida.idainfo_lenxref_get, _ida_ida.idainfo_lenxref_set)
    outflags = _swig_property(_ida_ida.idainfo_outflags_get, _ida_ida.idainfo_outflags_set)
    s_cmtflg = _swig_property(_ida_ida.idainfo_s_cmtflg_get, _ida_ida.idainfo_s_cmtflg_set)
    s_limiter = _swig_property(_ida_ida.idainfo_s_limiter_get, _ida_ida.idainfo_s_limiter_set)
    bin_prefix_size = _swig_property(_ida_ida.idainfo_bin_prefix_size_get, _ida_ida.idainfo_bin_prefix_size_set)
    s_prefflag = _swig_property(_ida_ida.idainfo_s_prefflag_get, _ida_ida.idainfo_s_prefflag_set)
    strlit_flags = _swig_property(_ida_ida.idainfo_strlit_flags_get, _ida_ida.idainfo_strlit_flags_set)
    strlit_break = _swig_property(_ida_ida.idainfo_strlit_break_get, _ida_ida.idainfo_strlit_break_set)
    strlit_zeroes = _swig_property(_ida_ida.idainfo_strlit_zeroes_get, _ida_ida.idainfo_strlit_zeroes_set)
    strtype = _swig_property(_ida_ida.idainfo_strtype_get, _ida_ida.idainfo_strtype_set)
    strlit_pref = _swig_property(_ida_ida.idainfo_strlit_pref_get, _ida_ida.idainfo_strlit_pref_set)
    strlit_sernum = _swig_property(_ida_ida.idainfo_strlit_sernum_get, _ida_ida.idainfo_strlit_sernum_set)
    datatypes = _swig_property(_ida_ida.idainfo_datatypes_get, _ida_ida.idainfo_datatypes_set)
    cc = _swig_property(_ida_ida.idainfo_cc_get, _ida_ida.idainfo_cc_set)
    abibits = _swig_property(_ida_ida.idainfo_abibits_get, _ida_ida.idainfo_abibits_set)
    def is_mem_aligned4(self, *args):
        """
        is_mem_aligned4(self) -> bool
        """
        return _ida_ida.idainfo_is_mem_aligned4(self, *args)

    def pack_stkargs(self, *args):
        """
        pack_stkargs(self) -> bool
        """
        return _ida_ida.idainfo_pack_stkargs(self, *args)

    def big_arg_align(self, *args):
        """
        big_arg_align(self) -> bool
        """
        return _ida_ida.idainfo_big_arg_align(self, *args)

    def stack_ldbl(self, *args):
        """
        stack_ldbl(self) -> bool
        """
        return _ida_ida.idainfo_stack_ldbl(self, *args)

    def stack_varargs(self, *args):
        """
        stack_varargs(self) -> bool
        """
        return _ida_ida.idainfo_stack_varargs(self, *args)

    def is_hard_float(self, *args):
        """
        is_hard_float(self) -> bool
        """
        return _ida_ida.idainfo_is_hard_float(self, *args)

    def use_gcc_layout(self, *args):
        """
        use_gcc_layout(self) -> bool
        """
        return _ida_ida.idainfo_use_gcc_layout(self, *args)

    appcall_options = _swig_property(_ida_ida.idainfo_appcall_options_get, _ida_ida.idainfo_appcall_options_set)
    def is_auto_enabled(self, *args):
        """
        is_auto_enabled(self) -> bool
        """
        return _ida_ida.idainfo_is_auto_enabled(self, *args)

    def set_auto_enabled(self, *args):
        """
        set_auto_enabled(self, value)
        """
        return _ida_ida.idainfo_set_auto_enabled(self, *args)

    def show_void(self, *args):
        """
        show_void(self) -> bool
        """
        return _ida_ida.idainfo_show_void(self, *args)

    def set_show_void(self, *args):
        """
        set_show_void(self, value)
        """
        return _ida_ida.idainfo_set_show_void(self, *args)

    def show_auto(self, *args):
        """
        show_auto(self) -> bool
        """
        return _ida_ida.idainfo_show_auto(self, *args)

    def set_show_auto(self, *args):
        """
        set_show_auto(self, value)
        """
        return _ida_ida.idainfo_set_show_auto(self, *args)

    def gen_null(self, *args):
        """
        gen_null(self) -> bool
        """
        return _ida_ida.idainfo_gen_null(self, *args)

    def set_gen_null(self, *args):
        """
        set_gen_null(self, value)
        """
        return _ida_ida.idainfo_set_gen_null(self, *args)

    def show_line_pref(self, *args):
        """
        show_line_pref(self) -> bool
        """
        return _ida_ida.idainfo_show_line_pref(self, *args)

    def set_show_line_pref(self, *args):
        """
        set_show_line_pref(self, value)
        """
        return _ida_ida.idainfo_set_show_line_pref(self, *args)

    def line_pref_with_seg(self, *args):
        """
        line_pref_with_seg(self) -> bool
        """
        return _ida_ida.idainfo_line_pref_with_seg(self, *args)

    def set_line_pref_with_seg(self, *args):
        """
        set_line_pref_with_seg(self, value)
        """
        return _ida_ida.idainfo_set_line_pref_with_seg(self, *args)

    def gen_lzero(self, *args):
        """
        gen_lzero(self) -> bool
        """
        return _ida_ida.idainfo_gen_lzero(self, *args)

    def set_gen_lzero(self, *args):
        """
        set_gen_lzero(self, value)
        """
        return _ida_ida.idainfo_set_gen_lzero(self, *args)

    def gen_tryblks(self, *args):
        """
        gen_tryblks(self) -> bool
        """
        return _ida_ida.idainfo_gen_tryblks(self, *args)

    def set_gen_tryblks(self, *args):
        """
        set_gen_tryblks(self, value)
        """
        return _ida_ida.idainfo_set_gen_tryblks(self, *args)

    def get_abiname(self, *args):
        """
        get_abiname(self) -> qstring
        """
        return _ida_ida.idainfo_get_abiname(self, *args)

    def get_minEA(self, *args):
        """
        get_minEA(self) -> ea_t
        """
        return _ida_ida.idainfo_get_minEA(self, *args)

    def set_minEA(self, *args):
        """
        set_minEA(self, ea)
        """
        return _ida_ida.idainfo_set_minEA(self, *args)

    def get_maxEA(self, *args):
        """
        get_maxEA(self) -> ea_t
        """
        return _ida_ida.idainfo_get_maxEA(self, *args)

    def set_maxEA(self, *args):
        """
        set_maxEA(self, ea)
        """
        return _ida_ida.idainfo_set_maxEA(self, *args)

    def get_procName(self, *args):
        """
        get_procName(self) -> qstring
        """
        return _ida_ida.idainfo_get_procName(self, *args)

    abiname = property(get_abiname)

    minEA = property(get_minEA, set_minEA)
    maxEA = property(get_maxEA, set_maxEA)
    procName = property(get_procName)


idainfo_swigregister = _ida_ida.idainfo_swigregister
idainfo_swigregister(idainfo)
INFFL_AUTO = _ida_ida.INFFL_AUTO
"""
Autoanalysis is enabled?
"""
INFFL_ALLASM = _ida_ida.INFFL_ALLASM
"""
the target assembler

may use constructs not supported by
"""
INFFL_LOADIDC = _ida_ida.INFFL_LOADIDC
"""
loading an idc file that contains database info
"""
INFFL_NOUSER = _ida_ida.INFFL_NOUSER
"""
do not store user info in the database
"""
INFFL_READONLY = _ida_ida.INFFL_READONLY
"""
(internal) temporary interdiction to modify the database
"""
INFFL_CHKOPS = _ida_ida.INFFL_CHKOPS
"""
check manual operands? (unused)
"""
INFFL_NMOPS = _ida_ida.INFFL_NMOPS
"""
allow non-matched operands? (unused)
"""
INFFL_GRAPH_VIEW = _ida_ida.INFFL_GRAPH_VIEW
"""
currently using graph options ({graph})
"""
LFLG_PC_FPP = _ida_ida.LFLG_PC_FPP
"""
decode floating point processor instructions?
"""
LFLG_PC_FLAT = _ida_ida.LFLG_PC_FLAT
"""
32-bit program?
"""
LFLG_64BIT = _ida_ida.LFLG_64BIT
"""
64-bit program?
"""
LFLG_IS_DLL = _ida_ida.LFLG_IS_DLL
"""
Is dynamic library?
"""
LFLG_FLAT_OFF32 = _ida_ida.LFLG_FLAT_OFF32
"""
treat 'REF_OFF32' as 32-bit offset for 16bit segments (otherwise try
SEG16:OFF16)
"""
LFLG_MSF = _ida_ida.LFLG_MSF
"""
Byte order: is MSB first?
"""
LFLG_WIDE_HBF = _ida_ida.LFLG_WIDE_HBF
"""
(wide bytes: {dnbits} > 8)

Bit order of wide bytes: high byte first?
"""
LFLG_DBG_NOPATH = _ida_ida.LFLG_DBG_NOPATH
"""
do not store input full path in debugger process options
"""
LFLG_SNAPSHOT = _ida_ida.LFLG_SNAPSHOT
"""
memory snapshot was taken?
"""
LFLG_PACK = _ida_ida.LFLG_PACK
"""
pack the database?
"""
LFLG_COMPRESS = _ida_ida.LFLG_COMPRESS
"""
compress the database?
"""
LFLG_KERNMODE = _ida_ida.LFLG_KERNMODE
"""
is kernel mode binary?
"""
IDB_UNPACKED = _ida_ida.IDB_UNPACKED
"""
leave database components unpacked
"""
IDB_PACKED = _ida_ida.IDB_PACKED
"""
pack database components into .idb
"""
IDB_COMPRESSED = _ida_ida.IDB_COMPRESSED
"""
compress & pack database components
"""
AF_CODE = _ida_ida.AF_CODE
"""
Trace execution flow.
"""
AF_MARKCODE = _ida_ida.AF_MARKCODE
"""
Mark typical code sequences as code.
"""
AF_JUMPTBL = _ida_ida.AF_JUMPTBL
"""
Locate and create jump tables.
"""
AF_PURDAT = _ida_ida.AF_PURDAT
"""
Control flow to data segment is ignored.
"""
AF_USED = _ida_ida.AF_USED
"""
Analyze and create all xrefs.
"""
AF_UNK = _ida_ida.AF_UNK
"""
Delete instructions with no xrefs.
"""
AF_PROCPTR = _ida_ida.AF_PROCPTR
"""
Create function if data xref data->code32 exists.
"""
AF_PROC = _ida_ida.AF_PROC
"""
Create functions if call is present.
"""
AF_FTAIL = _ida_ida.AF_FTAIL
"""
Create function tails.
"""
AF_LVAR = _ida_ida.AF_LVAR
"""
Create stack variables.
"""
AF_STKARG = _ida_ida.AF_STKARG
"""
Propagate stack argument information.
"""
AF_REGARG = _ida_ida.AF_REGARG
"""
Propagate register argument information.
"""
AF_TRACE = _ida_ida.AF_TRACE
"""
Trace stack pointer.
"""
AF_VERSP = _ida_ida.AF_VERSP
"""
Perform full SP-analysis. ({verify_sp})
"""
AF_ANORET = _ida_ida.AF_ANORET
"""
Perform 'no-return' analysis.
"""
AF_MEMFUNC = _ida_ida.AF_MEMFUNC
"""
Try to guess member function types.
"""
AF_TRFUNC = _ida_ida.AF_TRFUNC
"""
Truncate functions upon code deletion.
"""
AF_STRLIT = _ida_ida.AF_STRLIT
"""
Create string literal if data xref exists.
"""
AF_CHKUNI = _ida_ida.AF_CHKUNI
"""
Check for unicode strings.
"""
AF_FIXUP = _ida_ida.AF_FIXUP
"""
Create offsets and segments using fixup info.
"""
AF_DREFOFF = _ida_ida.AF_DREFOFF
"""
Create offset if data xref to seg32 exists.
"""
AF_IMMOFF = _ida_ida.AF_IMMOFF
"""
Convert 32bit instruction operand to offset.
"""
AF_DATOFF = _ida_ida.AF_DATOFF
"""
Automatically convert data to offsets.
"""
AF_FLIRT = _ida_ida.AF_FLIRT
"""
Use flirt signatures.
"""
AF_SIGCMT = _ida_ida.AF_SIGCMT
"""
Append a signature name comment for recognized anonymous library
functions.
"""
AF_SIGMLT = _ida_ida.AF_SIGMLT
"""
Allow recognition of several copies of the same function.
"""
AF_HFLIRT = _ida_ida.AF_HFLIRT
"""
Automatically hide library functions.
"""
AF_JFUNC = _ida_ida.AF_JFUNC
"""
Rename jump functions as j_...
"""
AF_NULLSUB = _ida_ida.AF_NULLSUB
"""
Rename empty functions as nullsub_...
"""
AF_DODATA = _ida_ida.AF_DODATA
"""
Coagulate data segs at the final pass.
"""
AF_DOCODE = _ida_ida.AF_DOCODE
"""
Coagulate code segs at the final pass.
"""
AF_FINAL = _ida_ida.AF_FINAL
"""
Final pass of analysis.
"""
AF2_DOEH = _ida_ida.AF2_DOEH
"""
Handle EH information.
"""
AF2_DORTTI = _ida_ida.AF2_DORTTI
"""
Handle RTTI information
"""
SW_SEGXRF = _ida_ida.SW_SEGXRF
"""
show segments in xrefs?
"""
SW_XRFMRK = _ida_ida.SW_XRFMRK
"""
show xref type marks?
"""
SW_XRFFNC = _ida_ida.SW_XRFFNC
"""
show function offsets?
"""
SW_XRFVAL = _ida_ida.SW_XRFVAL
"""
show xref values? (otherwise-"...")
"""
NM_REL_OFF = _ida_ida.NM_REL_OFF
NM_PTR_OFF = _ida_ida.NM_PTR_OFF
NM_NAM_OFF = _ida_ida.NM_NAM_OFF
NM_REL_EA = _ida_ida.NM_REL_EA
NM_PTR_EA = _ida_ida.NM_PTR_EA
NM_NAM_EA = _ida_ida.NM_NAM_EA
NM_EA = _ida_ida.NM_EA
NM_EA4 = _ida_ida.NM_EA4
NM_EA8 = _ida_ida.NM_EA8
NM_SHORT = _ida_ida.NM_SHORT
NM_SERIAL = _ida_ida.NM_SERIAL
DEMNAM_MASK = _ida_ida.DEMNAM_MASK
"""
mask for name form
"""
DEMNAM_CMNT = _ida_ida.DEMNAM_CMNT
"""
display demangled names as comments
"""
DEMNAM_NAME = _ida_ida.DEMNAM_NAME
"""
display demangled names as regular names
"""
DEMNAM_NONE = _ida_ida.DEMNAM_NONE
"""
don't display demangled names
"""
DEMNAM_GCC3 = _ida_ida.DEMNAM_GCC3
"""
assume gcc3 names (valid for gnu compiler)
"""
DEMNAM_FIRST = _ida_ida.DEMNAM_FIRST
"""
override type info
"""
LN_NORMAL = _ida_ida.LN_NORMAL
"""
include normal names
"""
LN_PUBLIC = _ida_ida.LN_PUBLIC
"""
include public names
"""
LN_AUTO = _ida_ida.LN_AUTO
"""
include autogenerated names
"""
LN_WEAK = _ida_ida.LN_WEAK
"""
include weak names
"""
OFLG_SHOW_VOID = _ida_ida.OFLG_SHOW_VOID
"""
Display void marks?
"""
OFLG_SHOW_AUTO = _ida_ida.OFLG_SHOW_AUTO
"""
Display autoanalysis indicator?
"""
OFLG_GEN_NULL = _ida_ida.OFLG_GEN_NULL
"""
Generate empty lines?
"""
OFLG_SHOW_PREF = _ida_ida.OFLG_SHOW_PREF
"""
Show line prefixes?
"""
OFLG_PREF_SEG = _ida_ida.OFLG_PREF_SEG
"""
line prefixes with segment name?
"""
OFLG_LZERO = _ida_ida.OFLG_LZERO
"""
generate leading zeroes in numbers
"""
OFLG_GEN_ORG = _ida_ida.OFLG_GEN_ORG
"""
Generate 'org' directives?
"""
OFLG_GEN_ASSUME = _ida_ida.OFLG_GEN_ASSUME
"""
Generate 'assume' directives?
"""
OFLG_GEN_TRYBLKS = _ida_ida.OFLG_GEN_TRYBLKS
"""
Generate try/catch directives?
"""
SW_RPTCMT = _ida_ida.SW_RPTCMT
"""
show repeatable comments?
"""
SW_ALLCMT = _ida_ida.SW_ALLCMT
"""
comment all lines?
"""
SW_NOCMT = _ida_ida.SW_NOCMT
"""
no comments at all
"""
SW_LINNUM = _ida_ida.SW_LINNUM
"""
show source line numbers
"""
SW_TESTMODE = _ida_ida.SW_TESTMODE
"""
testida.idc is running
"""
SW_SHHID_ITEM = _ida_ida.SW_SHHID_ITEM
"""
show hidden instructions
"""
SW_SHHID_FUNC = _ida_ida.SW_SHHID_FUNC
"""
show hidden functions
"""
SW_SHHID_SEGM = _ida_ida.SW_SHHID_SEGM
"""
show hidden segments
"""
LMT_THIN = _ida_ida.LMT_THIN
"""
thin borders
"""
LMT_THICK = _ida_ida.LMT_THICK
"""
thick borders
"""
LMT_EMPTY = _ida_ida.LMT_EMPTY
"""
empty lines at the end of basic blocks
"""
PREF_SEGADR = _ida_ida.PREF_SEGADR
"""
show segment addresses?
"""
PREF_FNCOFF = _ida_ida.PREF_FNCOFF
"""
show function offsets?
"""
PREF_STACK = _ida_ida.PREF_STACK
"""
show stack pointer?
"""
STRF_GEN = _ida_ida.STRF_GEN
"""
generate names?
"""
STRF_AUTO = _ida_ida.STRF_AUTO
"""
names have 'autogenerated' bit?
"""
STRF_SERIAL = _ida_ida.STRF_SERIAL
"""
generate serial names?
"""
STRF_UNICODE = _ida_ida.STRF_UNICODE
"""
unicode strings are present?
"""
STRF_COMMENT = _ida_ida.STRF_COMMENT
"""
generate auto comment for string references?
"""
STRF_SAVECASE = _ida_ida.STRF_SAVECASE
"""
preserve case of strings for identifiers
"""
ABI_8ALIGN4 = _ida_ida.ABI_8ALIGN4
"""
4 byte alignment for 8byte scalars (__int64/double) inside structures?
"""
ABI_PACK_STKARGS = _ida_ida.ABI_PACK_STKARGS
"""
do not align stack arguments to stack slots
"""
ABI_BIGARG_ALIGN = _ida_ida.ABI_BIGARG_ALIGN
"""
(e.g. __int64 argument should be 8byte aligned on some 32bit
platforms)

use natural type alignment for argument if the alignment exceeds
native word size
"""
ABI_STACK_LDBL = _ida_ida.ABI_STACK_LDBL
"""
long double areuments are passed on stack
"""
ABI_STACK_VARARGS = _ida_ida.ABI_STACK_VARARGS
"""
varargs are always passed on stack (even when there are free
registers)
"""
ABI_HARD_FLOAT = _ida_ida.ABI_HARD_FLOAT
"""
use the floating-point register set
"""
ABI_SET_BY_USER = _ida_ida.ABI_SET_BY_USER
"""
compiler/abi were set by user flag and require SETCOMP_BY_USER flag to
be changed
"""
ABI_GCC_LAYOUT = _ida_ida.ABI_GCC_LAYOUT
"""
use gcc layout for udts (used for mingw)
"""


def show_repeatables(*args):
  """
  show_repeatables() -> bool


  Is IDA configured to show all repeatable comments?
  """
  return _ida_ida.show_repeatables(*args)

def show_all_comments(*args):
  """
  show_all_comments() -> bool


  Is IDA configured to show all comment lines?
  """
  return _ida_ida.show_all_comments(*args)

def show_comments(*args):
  """
  show_comments() -> bool


  Is IDA configured to show any comments at all?
  """
  return _ida_ida.show_comments(*args)

def should_trace_sp(*args):
  """
  should_trace_sp() -> bool


  Is IDA configured to trace the stack pointer?
  """
  return _ida_ida.should_trace_sp(*args)

def should_create_stkvars(*args):
  """
  should_create_stkvars() -> bool


  Is IDA configured to create stack variables?
  """
  return _ida_ida.should_create_stkvars(*args)
UA_MAXOP = _ida_ida.UA_MAXOP
"""
max number of operands allowed for an instruction
"""

def calc_default_idaplace_flags(*args):
  """
  calc_default_idaplace_flags() -> int


  Get default disassembly line options.
  """
  return _ida_ida.calc_default_idaplace_flags(*args)
MAXADDR = _ida_ida.MAXADDR

def to_ea(*args):
  """
  to_ea(reg_cs, reg_ip) -> ea_t


  Convert (seg,off) value to a linear address.
  
  
  @param reg_cs (C++: sel_t)
  @param reg_ip (C++: ea_t)
  """
  return _ida_ida.to_ea(*args)
IDB_EXT32 = _ida_ida.IDB_EXT32
IDB_EXT64 = _ida_ida.IDB_EXT64
IDB_EXT = _ida_ida.IDB_EXT
if _BC695:
    AF2_ANORET=AF_ANORET
    AF2_CHKUNI=AF_CHKUNI
    AF2_DATOFF=AF_DATOFF
    AF2_DOCODE=AF_DOCODE
    AF2_DODATA=AF_DODATA
    AF2_FTAIL=AF_FTAIL
    AF2_HFLIRT=AF_HFLIRT
    AF2_JUMPTBL=AF_JUMPTBL
    AF2_MEMFUNC=AF_MEMFUNC
    AF2_PURDAT=AF_PURDAT
    AF2_REGARG=AF_REGARG
    AF2_SIGCMT=AF_SIGCMT
    AF2_SIGMLT=AF_SIGMLT
    AF2_STKARG=AF_STKARG
    AF2_TRFUNC=AF_TRFUNC
    AF2_VERSP=AF_VERSP
    AF_ASCII=AF_STRLIT
    ASCF_AUTO=STRF_AUTO
    ASCF_COMMENT=STRF_COMMENT
    ASCF_GEN=STRF_GEN
    ASCF_SAVECASE=STRF_SAVECASE
    ASCF_SERIAL=STRF_SERIAL
    ASCF_UNICODE=STRF_UNICODE
    INFFL_LZERO=OFLG_LZERO
    ansi2idb=ida_idaapi._BC695.identity
    idb2scr=ida_idaapi._BC695.identity
    scr2idb=ida_idaapi._BC695.identity
    showAllComments=show_all_comments
    showComments=show_comments
    showRepeatables=show_repeatables
    toEA=to_ea
    def __wrap_hooks_callback(klass, new_name, old_name, do_call):
        bkp_name = "__real_%s" % new_name
        def __wrapper(self, *args):
            rc = getattr(self, bkp_name)(*args)
            cb = getattr(self, old_name, None)
            if cb:
                rc = do_call(cb, *args)
            return rc
        setattr(klass, bkp_name, getattr(klass, new_name))
        setattr(klass, new_name, __wrapper)
    idainfo.ASCIIbreak = idainfo.strlit_break
    idainfo.ASCIIpref = idainfo.strlit_pref
    idainfo.ASCIIsernum = idainfo.strlit_sernum
    idainfo.ASCIIzeroes = idainfo.strlit_zeroes
    idainfo.asciiflags = idainfo.strlit_flags
    idainfo.beginEA = idainfo.start_ea
    idainfo.binSize = idainfo.bin_prefix_size
    def my_get_proc_name(self):
        return [self.procname, self.procname]
    idainfo.get_proc_name = my_get_proc_name
    idainfo.graph_view = property(idainfo.is_graph_view, idainfo.set_graph_view)
    idainfo.mf = property(idainfo.is_be, idainfo.set_be)
    idainfo.namelen = idainfo.max_autoname_len
    idainfo.omaxEA = idainfo.omax_ea
    idainfo.ominEA = idainfo.omin_ea
    def make_outflags_accessors(bit):
        def getter(self):
            return (self.outflags & bit) != 0
        def setter(self, value):
            if value:
                self.outflags |= bit
            else:
                self.outflags &= ~bit
        return getter, setter
    idainfo.s_assume = property(*make_outflags_accessors(OFLG_GEN_ASSUME))
    idainfo.s_auto = property(idainfo.is_auto_enabled, idainfo.set_auto_enabled)
    idainfo.s_null = property(*make_outflags_accessors(OFLG_GEN_NULL))
    idainfo.s_org = property(*make_outflags_accessors(OFLG_GEN_ORG))
    idainfo.s_prefseg = property(*make_outflags_accessors(OFLG_PREF_SEG))
    idainfo.s_showauto = property(*make_outflags_accessors(OFLG_SHOW_AUTO))
    idainfo.s_showpref = property(*make_outflags_accessors(OFLG_SHOW_PREF))
    idainfo.s_void = property(*make_outflags_accessors(OFLG_SHOW_VOID))
    idainfo.startIP = idainfo.start_ip
    idainfo.startSP = idainfo.start_sp
    def make_lflags_accessors(bit):
        def getter(self):
            return (self.lflags & bit) != 0
        def setter(self, value):
            if value:
                self.lflags |= bit
            else:
                self.lflags &= ~bit
        return getter, setter
    idainfo.wide_high_byte_first = property(*make_lflags_accessors(LFLG_WIDE_HBF))
    def make_obsolete_accessors():
        def getter(self):
            return False
        def setter(self, value):
            pass
        return getter, setter
    idainfo.allow_nonmatched_ops = property(*make_obsolete_accessors())
    idainfo.check_manual_ops = property(*make_obsolete_accessors())



cvar = _ida_ida.cvar
